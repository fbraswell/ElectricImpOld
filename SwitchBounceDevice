/* FMB Single switch */
 
// Create output object
out1 <- OutputPort("Switch7", "number");
 
// Store the last state so we know when we've changed; this starts out as -1 until we read the switch
laststate <- -1;
 
// Debounce code: ignore transitions for 50ms after event
ignore <- false;
function debounce() {
    // We can take notice of transitions from now onward
    ignore = false;
 
    // Ensure state is in sync
    check_state();
} 
 
function check_state() 
{
//    while(1)
//    {
        local s = hardware.pin1.read();
//        server.log("Switch State: %d", 0);
//        server.log("Switch State: %d", hardware.pin1.read()); 
//        server.log("Switch State: ");
//        server.log(s?"on":"off");
//        server.show(s?"myon":"myoff");
//        imp.sleep(0.5);
//        server.log(s);
        
//        imp.wakeup(0.5,"");
    // Has the state changed?
//    s = hardware.pin1.read();
    if (s != laststate) 
    {
        // Yes, note the state, send it, and update the planner
        laststate = s;
        out1.set(s);
        server.show(s?"xon":"xoff");
        server.log(s?"xon":"xoff");
        server.log(format("Signal: %d dBm", imp.rssi()));
    }        
//    }
    
}
 
// This function is called whenever the imp detects a change on pin1
function switched() {
    if (!ignore) 
    {
        check_state();
 
        // Ignore bounces
        ignore = true;
        imp.wakeup(0.1, debounce);
    }
}
 
// Get on the planner
imp.configure("Switch7", [], [out1]);
 
// Set up pin1 to be an input with a pull-up. This means it'll float high when the switch is open.
// This also registers the callback handler "switched" which will be automatically called whenever the
// pin changes state.
hardware.pin1.configure(DIGITAL_IN_PULLUP, switched);
server.log("--------Start Program------------"); 
// Call check_state at startup to ensure things are in sync.
check_state();
