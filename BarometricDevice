// #include <Wire.h>

// output port to send data to web page
local output = OutputPort( "Temp", "number");

// From the datasheet the BMP module address LSB distinguishes
// between read (1) and write (0) operations, corresponding to 
// address 0xEF (read) and 0xEE (write).

class FormInput extends InputPort
{
    name = "Form Get Info";
    type = "number";
    constructor()
    {
        server.log("In FormInput Constructor!");
    }
    
    function set(info)
    {
        server.show(format("From form: %d", info));
        server.log(format("From form: %d", info));
        
        // when we receive something get temp and send it back
        readSensor();
        server.show(format("set info temp: %d; pres: %d", temperature, pressure));
        server.log(format("set info temp: %d; pres: %d", temperature, pressure));
        output.set(temperature); // send data out
    }
}


// oversampling setting
// 0 = ultra low power
// 1 = standard
// 2 = high
// 3 = ultra high resolution
// const unsigned char oversampling_setting = 3; //oversampling for measurement
oversampling_setting <- 0; //oversampling for measurement

 // delays for oversampling settings 0, 1, 2 and 3 
pressure_conversiontime <- [ 5, 8, 14, 26 ]; 

// sensor registers from the BOSCH BMP085 datasheet
ac1 <- 0; // int ac1;
ac2 <- 0; // int ac2; 
ac3 <- 0; // int ac3; 
ac4 <- 0; // unsigned int ac4;
ac5 <- 0; // unsigned int ac5;
ac6 <- 0; // unsigned int ac6;
b1 <- 0; // int b1; 
b2 <- 0; // int b2;
mb <- 0; // int mb;
mc <- 0; // int mc;
md <- 0; // int md;

// variables to keep the values
// int temperature = 0;
temperature <- 0;
// long pressure = 0;
pressure <- 0;


server.log("--------Start Program------------"); 

// enter power save mode
imp.setpowersave(true);

// I2C Interface to TSL2561FN Light Sensor
// Pin 1 is SCL
// Pin 2 is SDA
// set the I2C clock speed. We can do 10 kHz, 50 kHz, 100 kHz, or 400 kHz
hardware.i2c12.configure(CLOCK_SPEED_400_KHZ);

// From the datasheet the BMP module address LSB distinguishes
// between read (1) and write (0) operations, corresponding to 
// address 0xEF (read) and 0xEE (write).
local bp_read_addr = 0xEF;
local bp_write_addr = 0xEE;

// the slave address for this device is set in hardware. Saving it here is helpful.
// local alsAddr = 0x52;

// Below there are the utility functions to get data from the sensor.


// read temperature and pressure from sensor
function readSensor() 
{
  local ut = readUT(); // int
  local up = readUP(); // long
//  long x1, x2, x3, b3, b5, b6, p;
//  unsigned long b4, b7;

  //calculate true temperature
//  x1 = ((long)ut - ac6) * ac5 >> 15;
    local x1 = (ut - ac6) * ac5 >> 15;
//  x2 = ((long) mc << 11) / (x1 + md);
    local x2 = (mc << 11) / (x1 + md);
    local b5 = x1 + x2;
    temperature = (b5 + 8) >> 4;
    server.log(format("calculated temp: |%d|", temperature));

  //calculate true pressure
   local b6 = b5 - 4000;
  x1 = (b2 * (b6 * b6 >> 12)) >> 11; 
  x2 = ac2 * b6 >> 11;
  local x3 = x1 + x2;
//  b3 = (((int32_t) ac1 * 4 + x3)<<oversampling_setting + 2) >> 2;
  local  b3 = ((ac1 * 4 + x3)<<oversampling_setting + 2) >> 2;
  x1 = ac3 * b6 >> 13;
  x2 = (b1 * (b6 * b6 >> 12)) >> 16;
  x3 = ((x1 + x2) + 2) >> 2;
//  b4 = (ac4 * (uint32_t) (x3 + 32768)) >> 15;
  local b4 = (ac4 * ((x3 + 32768)) >> 15);
//  b7 = ((uint32_t) up - b3) * (50000 >> oversampling_setting);
  local b7 = (up - b3) * (50000 >> oversampling_setting);
  local p = b7 < 0x80000000 ? (b7 * 2) / b4 : (b7 / b4) * 2;

  x1 = (p >> 8) * (p >> 8);
  x1 = (x1 * 3038) >> 16;
  x2 = (-7357 * p) >> 16;
  pressure = p + ((x1 + x2 + 3791) >> 4);
  server.log(format("calculated pressure: |%d|", pressure));
}


// read uncompensated temperature value
// unsigned int readUT() 
function readUT() 
{
  writeRegister(0xf4,0x2e);
  imp.sleep(0.005); // sleep in ms
//  delay(5); // the datasheet suggests 4.5 ms
  local temp = readIntRegister(0xf6);
    server.log(format("temp: |%d|", temp));
  return temp;
}

// read uncompensated pressure value
// long readUP() 
function readUP() 
{
  writeRegister(0xf4,0x34+(oversampling_setting<<6));
//  delay(pressure_conversiontime[oversampling_setting]);
// sleep in ms based on table
  imp.sleep(pressure_conversiontime[oversampling_setting]*0.001);

//  unsigned char msb, lsb, xlsb;
//  Wire.beginTransmission(I2C_ADDRESS);
//  Wire.write(0xf6);  // register to read
//  Wire.endTransmission();
    local r = 0xf6;
    local msb = hardware.i2c12.read(bp_read_addr, format("%c", r), 1);
    local lsb = hardware.i2c12.read(bp_read_addr, format("%c", r+1), 1);
    local xlsb = hardware.i2c12.read(bp_read_addr, format("%c", r+2), 1);

/*
  Wire.requestFrom(I2C_ADDRESS, 3); // request three bytes
  while(!Wire.available()); // wait until data available
  msb = Wire.read();
  while(!Wire.available()); // wait until data available
  lsb |= Wire.read();
  while(!Wire.available()); // wait until data available
  xlsb |= Wire.read();
*/
    local pressure = ((msb[0]<<16) | (lsb[0]<<8) | (xlsb[0])) >>(8-oversampling_setting);
    server.log(format("pressure: |%d|", pressure));
  return pressure;
}

MAXSHORTINT <- 32767;
MAXRANGE <- 65536;

function getCalibrationData() {
  server.log("Reading Calibration Data");
//  server.log("numbers: 32767, %d; +1 %d, ")
  ac1 = readIntRegister(0xAA); // int ac1
  server.log(format("AC1: raw %d; %d", ac1, (ac1 < MAXSHORTINT)?ac1:(ac1 - MAXRANGE+1)));
  ac1 = (ac1 <= MAXSHORTINT)?ac1:((ac1 - MAXSHORTINT+1) * -1);

  ac2 = readIntRegister(0xAC); // int ac2
  server.log(format("AC2: raw %d; %d", ac2, ac2 < MAXSHORTINT?ac2:(ac2 - MAXRANGE+1)));
  ac2 = ac2 <= MAXSHORTINT?ac2:((ac2 - MAXSHORTINT+1)  * -1);

  ac3 = readIntRegister(0xAE); // int ac3
  server.log(format("AC3: raw %d; %d", ac3, ac3 < MAXSHORTINT?ac3:(ac3 - MAXRANGE+1)));
  ac3 = ac3 <= MAXSHORTINT?ac3:((ac3 - MAXSHORTINT+1)  * -1);
  
  ac4 = readIntRegister(0xB0); // unsigned ac4
  server.log(format("AC4: |%d|", ac4));

  ac5 = readIntRegister(0xB2); // unsigned ac5
  server.log(format("AC5: |%d|", ac5));

  ac6 = readIntRegister(0xB4); // unsigned ac6
  server.log(format("AC6: |%d|", ac6));

  b1 = readIntRegister(0xB6); // int b1
  server.log(format("B1: raw %d; %d", b1, b1 < MAXSHORTINT?b1:(b1 - MAXRANGE+1)));
  b1 = b1 <= MAXSHORTINT?b1:((b1 - MAXSHORTINT+1) * -1);
  

  b2 = readIntRegister(0xB8); // int b2
  server.log(format("b2: raw %d; %d", b2, b2 < MAXSHORTINT?b2:(b2 - MAXRANGE+1)));
  b2 = b2 <= MAXSHORTINT?b2:((b2 - MAXSHORTINT+1) * -1);

  mb = readIntRegister(0xBA); // int mb
  server.log(format("MB: raw %d; %d", mb, mb < MAXSHORTINT?mb:(mb - MAXRANGE+1)));
  mb = mb <= MAXSHORTINT?mb:((mb - MAXSHORTINT+1) * -1);

  mc = readIntRegister(0xBC); // int mc
  server.log(format("MC: raw %d; %d", mc, mc < MAXSHORTINT?mc:(mc - MAXRANGE+1)));
  mc = mc <= MAXSHORTINT?mc:((mc - MAXSHORTINT+1) * -1);

  md = readIntRegister(0xBE); // int md
  server.log(format("MD: raw %d; %d", md, md < MAXSHORTINT?md:(md - MAXRANGE+1)));
  md = md <= MAXSHORTINT?md:((md - MAXSHORTINT+1) * -1);
}

// used to start conversion for temp or pressure
// pass control register addr r, and register value requesting v
function writeRegister(r, v)
{
//  hardware.i2c12.write(bp_write_addr, (r<<8 | v) );
  hardware.i2c12.write(bp_write_addr, format("%c%c", r, v) );
  // delay for time it takes for conversion
  // then call proc to fetch data
  // imp.wakeup(time, read_data);
  
  /*
  Wire.beginTransmission(I2C_ADDRESS);
  Wire.write(r);
  Wire.write(v);
  Wire.endTransmission();
  */
}

// read a 16 bit register r
function readIntRegister( r )
{
    // request register to read
    // param 2 is subaddr in a string format
//    hardware.i2c12.write(bp_write_addr, format("%c%c", r>>8, r&0xff));
    // read 2 bytes of data, supaddr "" not used
    local data0 = hardware.i2c12.read(bp_read_addr, format("%c", r), 1);
    
    local data1 = hardware.i2c12.read(bp_read_addr, format("%c", r+1), 1);
    server.log(format("read int reg: %d MSB, %d LSB"data0[0], data1[0]));
    return data0[0]<<8 | data1[0];
  /*
  unsigned char msb, lsb;
  Wire.beginTransmission(I2C_ADDRESS);
  Wire.write(r);  // register to read
  Wire.endTransmission();

  Wire.requestFrom(I2C_ADDRESS, 2); // request two bytes
  while(!Wire.available()); // wait until data available
  msb = Wire.read();
  while(!Wire.available()); // wait until data available
  lsb = Wire.read();
  return (((int)msb<<8) | ((int)lsb));
  */
}

// read an 8 bit register
/*
unsigned char readRegister(unsigned char r)
{
  unsigned char v;
  Wire.beginTransmission(I2C_ADDRESS);
  Wire.send(r);  // register to read
  Wire.endTransmission();

  Wire.requestFrom(I2C_ADDRESS, 1); // request a byte
  while(!Wire.available()); // wait until data available
  v = Wire.receive();
  return v;
}
*/
imp.configure("Barometric Test", [FormInput()], [output]);
getCalibrationData();

readSensor();

server.show(format("temp: %d; pres: %d", temperature, pressure));
server.log(format("temp: %d; pres: %d", temperature, pressure));

// end of program
