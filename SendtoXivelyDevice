
 
const informa_level_sensor = "2348143643fc42ee";
const wellmark_level_sensor = "2342173643fc42ee";
const wellmark_685e = "237c523643fc42ee";
const wellmark_chem_pump = "231a80eb6e4936ee";
const wellmark_high_level_alarm = "232ace4dead3dbee";
const WM_2366_high_level_alarm = "23669d4dead3dbee";
const WM_2307_high_level_alarm = "230789eb6e4936ee";
const WM_2313_high_level_alarm = "23139deb6e4936ee";
const WM_2332_high_level_alarm = "233252b236a7c9ee";
const WM_233c_high_level_alarm = "233c66eb6e4936ee";
const WM_2356_high_level_alarm = "23560c4cead3dbee";
const WM_236f_high_level_alarm = "236f544cead3dbee";
const WM_2370_high_level_alarm = "23703eeb6e4936ee";
const WM_2371_high_level_alarm = "23712eeb6e4936ee";
const WM_2348_high_level_alarm = "2348143643fc42ee";
const WM_2342_high_level_alarm = "2342173643fc42ee";
const WM_237c_high_level_alarm = "237c523643fc42ee";
const WM_232a_high_level_alarm = "232ace4dead3dbee";

// bssid: 881fa13a9c3c     SOM Network3                Home Network
// bssid: 0015ff7bf869     Verizon-MiFi5510L-F869      Verizon Jetpack 
// bssid: 0015ff6109ef     SA2100-WSXW                 Novatel Modem
               
imp.setpowersave(true);                                                                                                                                           
                                                                                                                                                                  
disconnectReason <- "";                                                                                                                                           
function getDisconnectReason(reason) {                                                                                                                            
    if (reason == NO_WIFI) {                                                                                                                                      
        return "Wifi went away";                                                                                                                                  
    }                                                                                                                                                             
    if (reason == NO_IP_ADDRESS) {                                                                                                                                
        return "Failed to get IP address";                                                                                                                        
    }                                                                                                                                                             
    if (reason == NO_SERVER) {                                                                                                                                    
        return "Failed to connect to server";                                                                                                                     
    }                                                                                                                                                             
    if (reason == NOT_RESOLVED) {                                                                                                                                 
        return "Failed to resolve server";                                                                                                                        
    }                                                                                                                                                             
    return ""                                                                                                                                                     
}                                                                                                                                                                 
                                                                                                                                                                  
function onConnected(status) {                                                                                                                                    
    if (status == SERVER_CONNECTED) {                                                                                                                             
        server.log("Reconnected after unexpected disconnect " +  disconnectReason);                                                                               
    }                                                                                                                                                             
}                                                                                                                                                                 
                                                                                                                                                                  
function tryToConnect() {                                                                                                                                         
    if (!server.isconnected()) {                                                                                                                                  
        server.connect(onConnected, 30);                                                                                                                          
        imp.wakeup(120, tryToConnect);                                                                                                                            
    }                                                                                                                                                             
}                                                                                                                                                                 
                                                                                                                                                                  
function onUnexpectedDisconnect(status) {                                                                                                                         
    disconnectReason = getDisconnectReason(status);                                                                                                               
    imp.wakeup(120, tryToConnect);                                                                                                                                
}                                                                                                                                                                 
                                                                                                                                                                  
gtemp <- 0;                                                                                                                                                       
gpressure <- 0;                                                                                                                                                   
gformin <- 5; // init value in seconds - take samples                                                                                                            
enable_reg <- 1; // regulator on = 1, off = 0   
gbatvoltage <- 0.0; // global battery voltage
voltage_enable <- 1; // enable high
digital_out_mode <- DIGITAL_OUT; 
                                                                                                                                                                  
triggerTemp <- 93; // temp F                                                                                                                                      
// hysteresis applied                                                                                                                                             
triggerTempCrossOver <- 0; // remember trigger state                                                                                                              
alarmMax <- 163.0; // alarm for tank inches                                                                                                                       
inchScale <- 1.0; // scaling for testing tank inch height                                                                                                         
                                                                                                                                                                  
class FormInput extends InputPort                                                                                                                                 
{                                                                                                                                                                 
    name = "Form Get Info";                                                                                                                                       
    type = "number";                                                                                                                                              
    constructor()                                                                                                                                                 
    {                                                                                                                                                             
//        server.log("In FormInput Constructor!");                                                                                                                
    }                                                                                                                                                             
                                                                                                                                                                  
    function set(info)                                                                                                                                            
    {                                                                                                                                                             
 //       server.show(format("From form: %d", info));                                                                                                               
        server.log(format("From form: %d", info));                                                                                                                
        gformin = info; // set global with info                                                                                                                   
        // when we receive something get temp and send it back                                                                                                    
        getPressure();                                                                                                                                            
    }                                                                                                                                                             
}                                                                                                                                                                 
                                                                                                                                                                  
function getTemp()                                                                                                                                                
{                                                                                                                                                                 
    local analogval = hardware.pin5.read(); // 0 - 65535                                                                                                          
    local tempC = ((analogval * 0.00005035)-0.5)*100.0;                                                                                                           
    local tempF = (9.0/5.0)*tempC + 32.0;                                                                                                                         
    gtemp = tempF; // set global temp var                                                                                                                         
//    agent.send("Temperature",{kind="Temperature", key=COSMKey, feed=COSMFeed, value=tempF });                                                                     
    local d = date();                                                                                                                                             
    if(tempF >= triggerTemp)                                                                                                                                      
    {                                                                                                                                                             
//        agent.send("sendSMS", { mess= format("Temperature Trigger: %6.3f reached! %s", tempF, impID), highlevelalarm= 0, other=1});                                                                    
        if(!triggerTempCrossOver) // just crossed over                                                                                                            
        {                                                                                                                                                         
            triggerTempCrossOver = 1;                                                                                                                             
        }                                                                                                                                                         
    } else if(tempF < triggerTemp * 0.90) // temp is less than trigger less 10%                                                                                   
    {                                                                                                                                                             
        // this allows some hysteresis                                                                                                                            
        triggerTempCrossOver = 0;                                                                                                                                 
    }                                                                                                                                                             
}                                                                                                                                                                 
                 
// The imp has 12 bit ADC and maps it across 65536 range                                                                                                          
// so 0-3.3V maps to 0-65535  
function getBatteryVoltage()
{
    local adval = hardware.pin9.read(); // 0 - 65535
    local volts = (hardware.voltage()/4096.0) * (adval/16.0); 
    // R1 = 357k and R2 = 96.7k (actual measurements)
    // Vbat = V (R1 + R2)/R2    // from the voltage divider
    local vbat = volts * (357 + 96.7)/96.7;
    gbatvoltage = vbat; // assign to global variable
}
                                                                                                                                                                  
// The imp has 12 bit ADC and maps it across 65536 range                                                                                                          
// so 0-3.3V maps to 0-65535                                                                                                                                      
// Transducer range is .5-2.5V, starting at 0psi                                                                                                                  
// ratio is 65535/3.3 = 19,859/V                                                                                                                                  
// thus 0 psi should read about 9,929                                                                                                                             
function getPressure()                                                                                                                                            
{                                                                                                                                                                 

    local analogval = hardware.pin7.read(); // 0 - 65535                                                                                                          
//    agent.send("ADCval",{kind="ADCval", key=COSMKey, feed=COSMFeed, value=analogval });                                                                           
    local volts = (hardware.voltage()/4096.0) * (analogval/16.0); // calc pressure here                                                                           
//    agent.send("Volts",{kind="Volts", key=COSMKey, feed=COSMFeed, value=volts });  
    
    // for #2313, chem tank level, we only need to send the analog
    // value and volts information
     if(hardware.getimpeeid() == WM_2313_high_level_alarm)
     {
         return;
     }
    
    local pressure = 63.0/70.0 * volts;                                                                                                                           
    local density = 0.82; // density of crude oil                                                                                                                 
    density = 0.035714;                                                                                                                                           
    local inches = 70 * volts - 35.0;  
    local switch0 = hardware.pin1.read();
    local switch1 = hardware.pin2.read();
                                                                                                                                                                  
    inches *= inchScale; // scale 16 inches to 144 inches for testing                                                                                             
    if(inches >= alarmMax)                                                                                                                                        
    {                                                                                                                                                             
//        agent.send("sendSMS", {mess=format("High Level Alert Warning! Inches at: %d Imp: %s", inches, impID), highlevelalarm=0, other=1});                                                          
    }                                                                                                                                                             
    local feet = (50631.0 - analogval) * 0.00042919;                                                                                                              
//    agent.send("Level",{kind="Level", key=COSMKey, feed=COSMFeed, value=feet });                                                                                  
    local barrels = inches * 200 / 180; // 200bbl/180in tank ratio                                                                                                
//    agent.send("Barrels",{kind="Barrels", key=COSMKey, feed=COSMFeed, value=barrels });                                                                           
    local d = date();                                                                                                                                             
    server.log(format("%02d-%02d-%d %02d:%02d.%02d, volts: %8.5f, analog val: %d, switch: %d, switch1: %d, %6.1f degF IMP: %6.1f rssi, %6.3f v, mem %d, ID: %s, bssid: %s, macaddr: %s, reg: %s, Vbat: %6.3f",       
                        d.month+1, d.day, d.year, d.hour, d.min, d.sec,                                                                                           
                        volts, analogval, switch0, switch1, gtemp, imp.rssi(),                                                                                                              
                        hardware.voltage(), imp.getmemoryfree(), hardware.getimpeeid(),                                                                           
                        imp.getbssid(), imp.getmacaddress(), enable_reg?"on ":"off ",
                        gbatvoltage
                        )); 
/*
    agent.send("Signal_Strength",{kind="Signal_Strength", key=COSMKey, feed=COSMFeed, value=imp.rssi() });                                                        
    agent.send("ImpVolts",{kind="ImpVolts", key=COSMKey, feed=COSMFeed, value=hardware.voltage() });                                                              
//    agent.send("Switch",{kind="Switch", key=COSMKey, feed=COSMFeed, value=hardware.pin1.read() });
    agent.send("Switch",{kind="Switch", key=COSMKey, feed=COSMFeed, value=switch0 });
//    agent.send("Switch1",{kind="Switch1", key=COSMKey, feed=COSMFeed, value=(hardware.pin2.read()?0:1) }); 
    agent.send("Switch1",{kind="Switch1", key=COSMKey, feed=COSMFeed, value=(switch1?0:1) });
    agent.send("Vbat",{kind="Vbat", key=COSMKey, feed=COSMFeed, value=gbatvoltage });
    agent.send("BootPass",{kind="BootPass", key=COSMKey, feed=COSMFeed, value=nv.count });
*/
}    // function getPressure()                                                                                                                                                              
                                                                                                                                                                  
function getAnalogData()                                                                                                                                          
{                                                                                                                                                                 
//    hardware.pin8.write(1); // alternately turn regulator on/off for testing
    hardware.pin8.write(voltage_enable?1:0); // alternately turn regulator on/off for testing
    imp.sleep(0.5); // block code for 100ms while sensors wake up 
    // Don't need getTemp() if #2313
    // #2313 is the sensor in the chem tank
    getBatteryVoltage(); // get battery voltage
    if(hardware.getimpeeid() != WM_2313_high_level_alarm)
    {
        getTemp(); // temp wakes up pretty fast  
    }
    getPressure(); // pressure takes quite a while                                                                                                                
//    hardware.pin8.write(0); // turn off regulator after sampling
    hardware.pin8.write(!voltage_enable?1:0); // turn off regulator after sampling
    imp.onidle(function() {server.sleepfor(gformin)});        
//    agent.send("sendSMS", {mess="", highlevelalarm=(hardware.pin2.read()?0:1), other=0});
} // function getAnalogData()        



impID <- "0"; // later might get impID from COSM?                                                                                                                 
COSMFeed <- "0";                                                                                                                                                  
COSMKey <- "0";                                                                                                                                                   
switch (hardware.getimpeeid())  {
//    case WM_2371_high_level_alarm:  // Imp Test
    case WM_2332_high_level_alarm:
    case WM_2370_high_level_alarm:
    case WM_232a_high_level_alarm:
    
        // Digital Write on pin 8 - control Vbat switch for blue transducer voltage                                                                                                     
        digital_out_mode = DIGITAL_OUT; // push-pull
//        digital_out_mode = DIGITAL_OUT_OD;
//        digital_out_mode = DIGITAL_OUT_OD_PULLUP;
        voltage_enable = 0; // Voltage enable is 0 for blue
        impID = "Informa Level Sensor";
        COSMFeed = 1912146058;
        COSMKey = "IYZq3Uo6zAeag3K8kkaMQt2RAw9ALSfwCDxTricWmaZ0AUSU";
        break;
    case informa_level_sensor:
        impID = "Informa Level Sensor";
        COSMFeed = 1912146058;
        COSMKey = "IYZq3Uo6zAeag3K8kkaMQt2RAw9ALSfwCDxTricWmaZ0AUSU";
        break;
        
    case wellmark_685e:
        impID = "Wellmark 685e";
        COSMFeed = 1519924291;
        COSMKey = "kiwWo7wGX7B7MwFeQziPpDuu8BomLijg7zoWNERejs1NbVEQ";
        break;
        
    case WM_236f_high_level_alarm:
    case WM_2356_high_level_alarm:  // large tank - lev sensor
    case wellmark_level_sensor:
        impID = "Wellmark Level Sensor";
        COSMFeed = 1889410555;
        COSMKey = "UNpHWaCkgWpR1Bxd8fJYIb5X7J5EAO0ysxnR7gBac1Mbcgm3";
        break;
        
    case WM_2313_high_level_alarm:  // chem tank level
    case wellmark_chem_pump:
        impID = "Wellmark Chem Pump Tank";
        COSMFeed = 467812498;
        COSMKey = "XEiiq8NpLgyLWXMICo1CsQRQa2Fd5vJ9omtmvQhSPNiyHKlX";
        break;
        
    case wellmark_high_level_alarm:
    case WM_2366_high_level_alarm:
    case WM_2307_high_level_alarm:  // chem pump
//    case WM_2313_high_level_alarm:  // chem tank level
//    case WM_2332_high_level_alarm:
    case WM_233c_high_level_alarm:
//    case WM_2356_high_level_alarm:  // large tank - lev sensor
//    case WM_236f_high_level_alarm:
//    case WM_2370_high_level_alarm:
    case WM_2371_high_level_alarm:  // level switch on lg tank
    case WM_2348_high_level_alarm:
    case WM_2342_high_level_alarm:
    case WM_237c_high_level_alarm:

        impID = "Wellmark High Level Alarm";
        COSMFeed = 1751179768;
        COSMKey = "yiPzMQXWRgaBMhUh3CIOHwAC6cPYhcol9rOZvDfkyUS3RPGr";
        break;
        
    default: impID = "Default"                                                                                                                                    
             COSMFeed = 0;                                                                                                                                        
             COSMKey = "0";                                                                                                                                       
} 


// Configure Pin1 to be wake up pin                                                                                                                               
// hardware.pin1.configure(DIGITAL_IN_WAKEUP);                                                                                                                    
                                                                                                                                                                  
// hardware.pin1.configure(DIGITAL_IN_PULLUP);                                                                                                                    
hardware.pin1.configure(DIGITAL_IN_PULLUP);                                                                                                                       
// hardware.pin1.configure(DIGITAL_IN_PULLUP);                                                                                                                    
hardware.pin2.configure(DIGITAL_IN_PULLUP);                                                                                                                       
// Analog read on pin 5 for temp                                                                                                                                  
hardware.pin5.configure(ANALOG_IN);                                                                                                                               
// Analog read on pin 7 for pressure                                                                                                                              
hardware.pin7.configure(ANALOG_IN); 

// Digital Write on pin 8 - control 3V regulator for sensors                                                                                                      
hardware.pin8.configure(digital_out_mode); 
// hardware.pin8.configure(DIGITAL_OUT_OD); 
hardware.pin8.write(!voltage_enable?1:0); // turn off 

// Analog read on pin 9 for scaled battery voltage                                                                                                                             
hardware.pin9.configure(ANALOG_IN); 

//imp.configure(impID, [FormInput()], []);                                                                                                                          
hardware.pin8.write(!voltage_enable?1:0); // turn off 

// Update a field in the table if it is present                                                                                                                   
// else initialise the table with a field                                                                                                                         
local boot = "cold";                                                                                                                                              
if (("nv" in getroottable()) && ("count" in nv))                                                                                                                  
{   // warm boot - nv present                                                                                                                                     
    nv.count++;                                                                                                                                                   
    // Display the sleep count on our node                                                                                                                        
//    server.show("--------Start Program------------Warm Boot Pass #" + nv.count);                                                                                  
    server.log("--------Start Program------------Warm Boot Pass #" + nv.count);                                                                                   
    boot = "warm";                                                                                                                                                
}                                                                                                                                                                 
else                                                                                                                                                              
{   // cold boot - create nv & init count                                                                                                                         
    nv <- {count = 1};                                                                                                                                            
    // Display the sleep count on our node                                                                                                                        
//    server.show("--------Start Program------------Cold Boot Pass #" + nv.count);                                                                                  
    server.log("--------Start Program------------Cold Boot Pass #" + nv.count);                                                                                   
    boot = "cold";                                                                                                                                                
//    agent.send("sendSMS", {mess="Starting Up Imp Cold Boot! " + impID, highlevelalarm=0, other=1});                                                                                                 
}                                                                                                                                                                 
                                                                                                                                                                  
imp.enableblinkup(true);                                                                                                                                          
                                                                                                                                                                  
local endtime = hardware.millis() + 10 * 1000; // set the end time by adding msecs                                                                                
while(boot == "cold" && (endtime - hardware.millis()) > 0) {                                                                                                      
    if (hardware.millis()%1000 == 0) {                                                                                                                            
        server.log("Blink up anyone?");                                                                                                                           
    }                                                                                                                                                             
    if ((endtime - hardware.millis()) < 0) { // time expired?                                                                                                     
        break;                                                                                                                                                    
    }                                                                                                                                                             
}                                                                                                                                                                 
                                                                                                                                                                  
getAnalogData();                                                                                                                                                  
                                                                                                                                                                  
