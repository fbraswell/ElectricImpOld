// Agent test code

// Send SMS message by Twilio
const TWILIO_ACCOUNT_SID = "AC2125ebaf03194d2f1cf1902b0c4592bb"
const TWILIO_AUTH_TOKEN = "32f6d0007503cc300765cf6ef9e4e4d0"
const TWILIO_FROM_NUMBER = "+18017011865" // your phone no goes here
const TWILIO_TO_NUMBER = "+17657601638" // FMB destination phone no
// const TWILIO_TO_NUMBER = "+13174320753" // Randy destination phone no
 
function send_sms(number, message) {
    local twilio_url = format("https://api.twilio.com/2010-04-01/Accounts/%s/SMS/Messages.json", TWILIO_ACCOUNT_SID);
    local auth = "Basic " + http.base64encode(TWILIO_ACCOUNT_SID+":"+TWILIO_AUTH_TOKEN);
    local body = http.urlencode({From=TWILIO_FROM_NUMBER, To=number, Body=message});
    local req = http.post(twilio_url, {Authorization=auth}, body);
    local res = req.sendsync();
    if(res.statuscode != 201) {
        server.log("error sending message: "+res.body);
    }
}
 
device.on("sendSMS", function(mess) {
    send_sms(TWILIO_TO_NUMBER, mess);
});

// COSM Code Below
// cosm_api_key <- "3PtUOR3nhTcsmTcQgIC_b_H1KaWSAKxMWXJhUFBJc0t5OD0g";

// table will need the COSM ApiKey later
http_put_table <- { "Content-Type": "text/csv", "X-ApiKey": "3PtUOR3nhTcsmTcQgIC_b_H1KaWSAKxMWXJhUFBJc0t5OD0g" };

/*
url_str_pressure_stream <- "http://api.cosm.com/v2/feeds/120528/datastreams/Pressure.csv";
url_str_temp_stream <- "http://api.cosm.com/v2/feeds/120528/datastreams/Temperature.csv";
local urls =
{
    tankPressure = "http://api.cosm.com/v2/feeds/120528/datastreams/Pressure.csv",
    tankTemp = "http://api.cosm.com/v2/feeds/120528/datastreams/Temperature.csv"
}
*/
// string for the api key information
// example: "Content-Type": "text/csv", "X-ApiKey": "3PtUOR3nhTcsmTcQgIC_b_H1KaWSAKxMWXJhUFBJc0t5OD0g"
// http_info = "Content-Type": "text/csv", "X-ApiKey": %s";

// string for the feed and datastream name info
// example: "http://api.cosm.com/v2/feeds/120528/datastreams/Pressure.csv"
url_info <- "http://api.cosm.com/v2/feeds/%d/datastreams/%s.csv";

tempPrev <- 0; // init temp
// triggerTemp <- 80; // trigger
// triggerCrossover <- 0; // false init
/*
function reportsuccess(response)
{
  device.send("success", response.statuscode);
  server.log(format("agent send pressure response code: %d ", response.statuscode));
}
function reportsuccessTemp(response)
{
  device.send("success", response.statuscode);
  server.log(format("agent send temp response code: %d ", response.statuscode));
}
*/
function sendtocosm(param)
{
  // 120528 = cosm feed number
  // 3PtUOR3nhTcsmTcQgIC_b_H1KaWSAKxMWXJhUFBJc0t5OD0g = cosm api key
  // Pressure = cosm stream ID
//  local v=value.tostring();
//  local req = http.put("http://api.cosm.com/v2/feeds/120528/datastreams/Pressure.csv",
//                { "Content-Type": "text/csv", "X-ApiKey": "3PtUOR3nhTcsmTcQgIC_b_H1KaWSAKxMWXJhUFBJc0t5OD0g" },
//                v);
//    local req = http.put(url_str_pressure_stream, http_put_table, format("%6.3f", param.value));
    http_put_table["X-ApiKey"] = param.key;
    local req = http.put(format(url_info, param.feed, param.kind), http_put_table, format("%6.3f", param.value));
//    local req = http.put(urls[param.kind], http_put_table, format("%6.3f", param.value));
//  req.sendasync(reportsuccess);
  req.sendasync(
        function(response) // report success
        {
            device.send("success", response.statuscode);
            if(response.statuscode != 200)
            { server.log(format("agent send %s response code: %d ", param.kind, response.statuscode));
            }
        }
    );
//    if(param.value > triggerTemp && !triggerCrossover )
//    {
        
//    }
// server.log(format("Pressure Value Sent: %6.3f", value));  
}
/*
function sendtocosm_temp(param)
{
    local req = http.put(url_str_temp_stream, http_put_table, format("%9.3f", param.value));
//    req.sendasync(reportsuccessTemp);
    req.sendasync(
        function(response) // report success
        {
            device.send("success", response.statuscode);
            server.log(format("agent send temp response code: %d ", response.statuscode));
        }
    );
}
*/
// device.on("tankPressure", sendtocosm);
// device.on("tankTemp", sendtocosm_temp);
// device.on("tankTemp", sendtocosm);

// table is returned containing kind, key, feed, value
// kind: Level, Pressure, etc.
// key: COSM api key for feed
// feed: COSM feed number
// value: data value
device.on("ADCval", sendtocosm); // raw ADC value
device.on("Barrels", sendtocosm); // calculated Barrels
device.on("ImpVolts", sendtocosm); // Imp reported vcc
device.on("Level", sendtocosm); // Tank level calculated in inches
device.on("Pressure", sendtocosm); // calculated sensor pressure
device.on("Signal_Strength", sendtocosm); // rssi signal strength seen by Imp
device.on("Temperature", sendtocosm); // temperature sensor reading in F
device.on("Volts", sendtocosm); // volts calculated from ADCval


