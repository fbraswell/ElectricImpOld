// Chem pump code for WellMark project
// Reads modbus info from TimeMark controller
// and reports it back to Xively
// Can write commands to Modbus controller
// for changing quarts per day, and shutting
// down motor if 0 quarts per day
// Can read analog pressure if needed
// Reads flow meter Hall effect switch

// Flow meter test
function getGallons() {
                                                                                                                                                                 
    local analogval = hardware.pin7.read(); // 0 - 65535                                                                                                          
                                                                            
    local volts = (hardware.voltage()/4096.0) * (analogval/16.0); // calc pressure here                                                                           
                                                                                   
    local pressure = 63.0/70.0 * volts;                                                                                                                           
    local density = 0.82; // density of crude oil                                                                                                                 
    density = 0.035714;                                                                                                                                           
    local inches = 70 * volts - 35.0;                                                                                                                             
                                                                                                                                                                  
    //inches *= inchScale; // scale 16 inches to 144 inches for testing                                                                                             
                                                                                                                                                            
    local feet = (50631.0 - analogval) * 0.00042919;                                      
    
    return feet * 12.0 / 72.0;
}

// UART Communication example for the Modbus communication
// Transfer data from Imp uart, pins 1 CTS (not used by us), 2 RTS, 8 Tx, 9 Rx
// Data will be sent form the Imp to the Spark Fun RS-485 break-out board
// The board uses the RTS signal to control the direction of the data on 
// the RS-485 wires
 
function readSerial() {
    local result = hardware.uart1289.read();
    if (result == -1) {
        server.show("No data returned.");
    } else {
        server.show(format("%x", result));
    }
 
}

function writeRegisterRequest()
{
    hardware.uart1289.write(0xxx);
}

function setMotorState(state) {
    local motorCommand = [];
    if (state == 1) {
        motorCommand = [ 0x10, 0x05, 0x00, 0x01, 0xFF, 0x00, 0xDE, 0xBB ];
    }
    else {
        motorCommand = [ 0x10, 0x05, 0x00, 0x01, 0x00, 0x00, 0x9F, 0x4B ]; 
    }
    
    server.log("Setting motor to: " + state);
    imp.sleep(100.0/1000.0);
    hardware.pin2.write(1);
    imp.sleep(100.0/1000.0);
    foreach(val in motorCommand) {
        hardware.uart1289.write(val);
    }
    imp.sleep(100.0/1000.0);
    hardware.pin2.write(0);
    imp.sleep(100.0/1000.0);
}

function writeQuartsPerDay(value) {
    // hex string "10 06 00 03 41 28 00 00 F7 33"
    // Modbus address - 0x10
    // command - 0x06
    // register - 0x0003
    // data (32 bit float) 0x41280000
    // CRC 0xF733
    
    if (value > 0.1)
        setMotorState(1);
    else
        setMotorState(0);
    
    if (value > 0.1) {
        
        local qpdCommand = [ 0x10, 0x06, 0x00, 0x03 ];
        
        local flBlob = blob(4);
        flBlob.writen(value.tofloat(), 'f');
        
        qpdCommand.append(flBlob[3]);
        qpdCommand.append(flBlob[2]);
        qpdCommand.append(flBlob[1]);
        qpdCommand.append(flBlob[0]);
        
        local crc = calculateCRC(qpdCommand, qpdCommand.len());
        qpdCommand.extend(crc);
        
        server.log("Writing quarts per day");
        imp.sleep(100.0/1000.0);
        hardware.pin2.write(1);
        imp.sleep(100.0/1000.0);
        foreach(val in qpdCommand) {
            hardware.uart1289.write(val);
        }
        imp.sleep(100.0/1000.0);
        hardware.pin2.write(0);
        imp.sleep(100.0/1000.0);
    }
}


function writeOnTime()
{
    // hex string "10 06 00 00 00 03 1B 48"
    // Modbus address - 0x10
    // command - 0x06
    // register - 0x0000
    // number of bytes 0x0003
    // CRC 0x1B48
    
    // prepare data stream by filling in the off time integer
    // 10 06 xx xx 05 xx xx
    // compose the string with the CRC at the end
}
function writeOffTime()
{
    // hex string "10 06 00 01 00 05 1B 48"
    // address - 0x10
    // command - 0x06
    // data - 0x0001
    // number of bytes 0x0005
    // CRC 0x1B48
    
    // prepare data stream by filling in the off time integer
    // 10 06 xx xx 05 xx xx
    // compose the string with the CRC at the end
    
}

// CRC calculation code below is needed for the Modbus
// data packages.
/*************************************************/
/************ CRC Calculation Code ***************/
/*************************************************/

function byteArrayString(arr){
    local str = ""
    for(local i = 0; i < arr.len(); i++){
        if(arr[i] == null) break;
            str = str + format("%.2X ", arr[i]);
        }
    return str;
}

// blob of CRC values for high–order byte
const auchCRCHi = "\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40";
// blob of CRC values for low–order byte
const auchCRCLo = "\x00\xC0\xC1\x01\xC3\x03\x02\xC2\xC6\x06\x07\xC7\x05\xC5\xC4\x04\xCC\x0C\x0D\xCD\x0F\xCF\xCE\x0E\x0A\xCA\xCB\x0B\xC9\x09\x08\xC8\xD8\x18\x19\xD9\x1B\xDB\xDA\x1A\x1E\xDE\xDF\x1F\xDD\x1D\x1C\xDC\x14\xD4\xD5\x15\xD7\x17\x16\xD6\xD2\x12\x13\xD3\x11\xD1\xD0\x10\xF0\x30\x31\xF1\x33\xF3\xF2\x32\x36\xF6\xF7\x37\xF5\x35\x34\xF4\x3C\xFC\xFD\x3D\xFF\x3F\x3E\xFE\xFA\x3A\x3B\xFB\x39\xF9\xF8\x38\x28\xE8\xE9\x29\xEB\x2B\x2A\xEA\xEE\x2E\x2F\xEF\x2D\xED\xEC\x2C\xE4\x24\x25\xE5\x27\xE7\xE6\x26\x22\xE2\xE3\x23\xE1\x21\x20\xE0\xA0\x60\x61\xA1\x63\xA3\xA2\x62\x66\xA6\xA7\x67\xA5\x65\x64\xA4\x6C\xAC\xAD\x6D\xAF\x6F\x6E\xAE\xAA\x6A\x6B\xAB\x69\xA9\xA8\x68\x78\xB8\xB9\x79\xBB\x7B\x7A\xBA\xBE\x7E\x7F\xBF\x7D\xBD\xBC\x7C\xB4\x74\x75\xB5\x77\xB7\xB6\x76\x72\xB2\xB3\x73\xB1\x71\x70\xB0\x50\x90\x91\x51\x93\x53\x52\x92\x96\x56\x57\x97\x55\x95\x94\x54\x9C\x5C\x5D\x9D\x5F\x9F\x9E\x5E\x5A\x9A\x9B\x5B\x99\x59\x58\x98\x88\x48\x49\x89\x4B\x8B\x8A\x4A\x4E\x8E\x8F\x4F\x8D\x4D\x4C\x8C\x44\x84\x85\x45\x87\x47\x46\x86\x82\x42\x43\x83\x41\x81\x80\x40";
 
function calculateCRC ( puchMsg, usDataLen ){
    //unsigned char *puchMsg ; // message to calculate CRC upon
    //unsigned short usDataLen ; // quantity of bytes in message
    local uchCRCHi = 0xFF ; // high byte of CRC initialized
    local uchCRCLo = 0xFF ; // low byte of CRC initialized
    local uIndex ; // will index into CRC lookup table
    local i = 0;
    while (usDataLen--){ // pass through message buffer
        uIndex = uchCRCLo ^ puchMsg[i] ; // calculate the CRC
        uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
        uchCRCHi = auchCRCLo[uIndex] ;
        i++
    }
    return [uchCRCLo, uchCRCHi] ;
}

/*************************************************/
/*************************************************/

function requestRegisterInfo()
{
    // write hex "10 03 00 00 00 0F 06 8F"
    local requestRegisters = [ 0x10, 0x03, 0x00, 0x00, 0x00, 0x0F ];
    local crc = calculateCRC(requestRegisters, requestRegisters.len());
    requestRegisters.extend(crc);
    // This requests the register data
    foreach(val in requestRegisters) {
        hardware.uart1289.write(val);
    }
}
//local crc = calculateCRC([ 0x10, 0x03, 0x00, 0x00, 0x00, 0x0F ], 6);
//server.log(format("CRC: %x %x", crc[0], crc[1]));

server.log("Configure!");
// configure a pin group for UART TX/RX. RTS is used, but not CTS

hardware.uart1289.configure(9600, 8, PARITY_NONE, 1, NO_CTSRTS);
hardware.pin2.configure(DIGITAL_OUT);
hardware.pin7.configure(ANALOG_IN);


// take pulse samples for the last 5 minutes
function getFlowRate() {
    //3785.4 pulses per gallon, 4 quarts in a gallon
    //122 pulses per minute
    //16.387 pulses per cubic inch
    return nv.pulses.len() / 3785.4 / 4 / 2;
}

hardware.pin5.configure(DIGITAL_IN, function() {
    local now = time();
    nv.pulses.append(now);
    nv.flowcnt++;
    server.log("***state change on pin 5, len: "+nv.pulses.len()+" pin level: "+hardware.pin5.read());
    local oldestTime = nv.pulses[0];
    local fiveMinutesAgo = now - 5*60*1000;
    
    for (local i=0; i<nv.pulses.len(); i++) {
        if (oldestTime >= fiveMinutesAgo) {
            nv.pulses = nv.pulses.slice(i);
            break
        }
    }
});

// hardware.uart12.configure(115200, 8, PARITY_NONE, 1, NO_CTSRTS, readSerial);
 
imp.setpowersave(true);
 
imp.configure("Chemical Pump Controller", [ ], [ ]);

// Update a field in the table if it is present                                                                                                                   
// else initialise the table with a field                                                                                                                         
local boot = "cold";                                                                                                                                              
if (("nv" in getroottable()) && ("count" in nv))                                                                                                                  
{   // warm boot - nv present                                                                                                                                     
    nv.count++;                                                                                                                                                   
    // Display the sleep count on our node                                                                                                                        
    server.show("--------Start Program------------Warm Boot Pass #" + nv.count);                                                                                  
    server.log("--------Start Program------------Warm Boot Pass #" + nv.count);                                                                                   
    boot = "warm";                                                                                                                                                
}                                                                                                                                                                 
else                                                                                                                                                              
{   // cold boot - create nv & init count                                                                                                                         
    nv <- {
        pulses = [],
        count = 1,
        flowcnt = 0
    };
    // Display the sleep count on our node                                                                                                                        
    server.show("--------Start Program------------Cold Boot Pass #" + nv.count);                                                                                  
    server.log("--------Start Program------------Cold Boot Pass #" + nv.count);                                                                                   
    boot = "cold";                                                                                                                                                
    //agent.send("sendSMS", "Starting Up Imp Cold Boot! ");                                                                                                 
    
}                                                                                                                                                                 
                                                                                                                                                                  
imp.enableblinkup(true);                                                                                                                                          
                                                                                                                                                                  
local endtime = hardware.millis() + 10 * 1000; // set the end time by adding msecs                                                                                
while(boot == "cold" && (endtime - hardware.millis()) > 0) {                                                                                                      
    if (hardware.millis()%1000 == 0) {                                                                                                                            
        server.log("Blink up anyone?");                                                                                                                           
    }                                                                                                                                                             
    if ((endtime - hardware.millis()) < 0) { // time expired?                                                                                                     
        break;                                                                                                                                                    
    }                                                                                                                                                             
}               

imp.sleep(1.0);

agent.on("newsetpoint", function(newsetpoint) {
    server.log("Setting QuartsPerDay to: " + newsetpoint);
    writeQuartsPerDay(newsetpoint);
});

function handleModbus() {
    local d = date(); 
    server.log(format("%02d-%02d-%d %02d:%02d.%02d, IMP: %6.1f rssi, %6.3f v, mem %d, ID: %s, bssid: %s, macaddr: %s",       
                        d.month+1, d.day, d.year, d.hour, d.min, d.sec,                                                                                           
                        imp.rssi(),                                                                                                              
                        hardware.voltage(), imp.getmemoryfree(), hardware.getimpeeid(),                                                                           
                        imp.getbssid(), imp.getmacaddress() ))
    
    server.log("Reading values from MODBUS registers");
    hardware.pin2.write(1);
    requestRegisterInfo();
    imp.sleep(10.0/1000.0);
    hardware.pin2.write(0);
    imp.sleep(10.0/1000.0);
    
    local byte = -1;
    // The a stands for all bytes but I didn't want to type it out so many times.
    local a = [ ];
    while ((byte = hardware.uart1289.read()) != -1) {
//        server.log("byte: %d", byte);
        a.append(byte);
        imp.sleep(100.0/1000.0);
    }
    
    // Some of these are supposed to be unsigned.  Are those being read correctly?
    local csvPayload = "";
//    if (a.len() > 0) 
    if (a.len() == 32)  // must have read all modbus registers
    {
        local onTime = (a[3] << 8) | a[4];
        local offTime = (a[5] << 8) | a[6]; 
        
        // Convert the quarts per day from binary to a float
        local qpd = blob(4);
        qpd.writen(a[12], 'b');
        qpd.writen(a[11], 'b');
        qpd.writen(a[10], 'b');
        qpd.writen(a[9], 'b');
        qpd.seek(0, 'b');
        local quartsPerDay = qpd.readn('f');
        
        csvPayload = format("%s,%d\n%s,%d\n%s,%.2f\n%s,%.2f\n%s,%d\n%s,%d\n%s,%d\n%s,%d\n%s,%d\n%s,%.2f\n%s,%d", // \n%s,%.2f\n%s,%.2f"   // \n%s,%d\n%s,%.2f", // \n%s,%d",
            "OnTime", onTime,
            "OffTime", offTime,
            "TemperatureSetPoint", (a[7] << 8) | a[8],
            "QuartsPerDay", quartsPerDay,
            "Cycles", (a[13] << 24) | (a[14] << 16) | (a[15] << 8) | a[16],
            "Temperature", (a[17] << 8) | a[18],
            "PlungerSize", (a[19] << 8) | a[20],
            "PinPosition", (a[21] << 8) | a[22],
            "MotorSize", (a[23] << 8) | a[24],
            "BatteryVoltage", (a[25] << 24) | (a[26] << 16) | (a[27] << 8) | a[28], // not working
            "VersionNumber", (a[29] << 24) | (a[30] << 16) | (a[31] << 8) | a[32]
//            "Gallons", getGallons(),
//            "FlowRate", getFlowRate()
//          ,  "ADCval", hardware.pin7.read(),
//            "Volts", (hardware.voltage()/4096.0) * (hardware.pin7.read()/16.0)
//             , "Signal_Strength", imp.rssi()
        );
        agent.send("csv", csvPayload);
        server.log("Sending Payload: ");
        server.log(csvPayload);
    }
    else {
        server.log("Can't read MODBUS registers!");
    }
    
    agent.send("csv",format("%s,%6.1f\n%s,%6.3f\n%s,%.2f\n%s,%.2f", // \n%s,%d", // \n%s,%.2f",
    "ImpVolts", hardware.voltage(), 
    "Signal_Strength", imp.rssi(),           // ))
    "Gallons", getGallons(),
    "FlowRate", getFlowRate()
    
//    , "ADCval", hardware.pin7.read(),
//    "Volts", (hardware.voltage()/4096.0) * (hardware.pin7.read()/16.0)
    ));
    local d = date();                                                                                                                                             
    server.log(format("%02d-%02d-%d %02d:%02d.%02d, IMP: %6.1f rssi, %6.3f v, mem %d, ID: %s, bssid: %s, macaddr: %s, flow %.2f, gal %.2f, flow count: %d",       
                        d.month+1, d.day, d.year, d.hour, d.min, d.sec,                                                                                           
                        imp.rssi(),                                                                                                              
                        hardware.voltage(), imp.getmemoryfree(), hardware.getimpeeid(),                                                                           
                        imp.getbssid(), imp.getmacaddress(),
                        getFlowRate(), getGallons(),
                        nv.flowcnt
                        ));  
//    imp.wakeup(10.0, function(){return;});  
        
//    imp.sleep(5);
/*
    imp.onidle(function() 
    {   // imp.wakeup(10.0, function(){server.sleepfor(0.01);});
        // server.sleepfor(10.0);
        // imp.sleep(10.0);
        // imp.wakeup(10.0, function(){return;});
    });
*/
//    imp.onidle(function() {imp.wakeup(10.0, handleModbus)});
} // function handleModbus() 

const wellmark_chem_pump = "231a80eb6e4936ee";
const WM_2331_chem_pump = "2331bd4cead3dbee";
const WM_234e_chem_pump = "234e394cead3dbee";
const WM_2307_chem_pump = "230789eb6e4936ee";

//sendSMS();
// handleModbus();
// imp.wakeup(10.0, function(){handleModbus();});

local loopcnt = 0;

function poll() {
    server.log(format("---loop count: %d ---", loopcnt++));
//    loopcnt++;  // loop counter
  handleModbus();
  imp.wakeup(10.0, poll);
}
 
// start the loop
poll();
